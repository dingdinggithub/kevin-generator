<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>entity</name>
	<filePath>${projectPath}/src/main/java/${packageName?replace(".","/")}/business/impl</filePath>
	<fileName>${ClassName?cap_first}BusinessImpl.java</fileName>
	<content><![CDATA[package ${packageName}.business.impl;

import com.github.pagehelper.Page;
import com.kevin.common.domain.response.BaseResponse;
import com.kevin.common.domain.response.PageQueryResponse;
import ${packageName}.business.${ClassName?cap_first}Business;
import ${packageName}.common.PageRequest;
import ${packageName}.domain.entity.${ClassName?cap_first};
import ${packageName}.dto.request.${ClassName?uncap_first}.*;
import ${packageName}.dto.response.${ClassName?uncap_first}.${ClassName?cap_first}PageResDTO;
import ${packageName}.service.BaseService;
import ${packageName}.service.${ClassName?cap_first}Service;
import lombok.extern.slf4j.Slf4j;
import org.dozer.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Objects;
import java.util.List;
import java.util.stream.Collectors;

/**
 * ${functionName}BusinessImpl
 * @author ${functionAuthor}
 * @date ${functionDate}
 */
@Service
@Slf4j
public class ${ClassName?cap_first}BusinessImpl implements ${ClassName?cap_first}Business {

    @Autowired
    private Mapper mapper;

    @Autowired
    private ${ClassName?cap_first}Service ${ClassName?uncap_first}Service;

    @Override
    public BaseResponse insert${ClassName?cap_first}(${ClassName?cap_first}InsertReqDTO ${ClassName?uncap_first}) {

        int result = ${ClassName?uncap_first}Service.insert(mapper.map(${ClassName?uncap_first},${ClassName?cap_first}.class));

        return BaseResponse.createSuccessResult(null);
    }

    @Override
    public BaseResponse batchInsert${ClassName?cap_first}(${ClassName?cap_first}BatchInsertReqDTO ${ClassName?uncap_first}BatchInsertReqDTO) {
        List<${ClassName?cap_first}> ${ClassName?uncap_first}List = ${ClassName?uncap_first}BatchInsertReqDTO.getInsert${ClassName?cap_first}List().stream()
                .map(item-> mapper.map(item, ${ClassName?cap_first}.class)).collect(Collectors.toList());
        ${ClassName?uncap_first}Service.batchInsert(${ClassName?uncap_first}List);

        return BaseResponse.createSuccessResult(null);
    }

    @Override
    public BaseResponse update${ClassName?cap_first}(${ClassName?cap_first}UpdateReqDTO ${ClassName?uncap_first}) {
        int result = ${ClassName?uncap_first}Service.updateById(mapper.map(${ClassName?uncap_first},${ClassName?cap_first}.class));

        return BaseResponse.createSuccessResult(null);
    }

    @Override
    public BaseResponse batchUpdate${ClassName?cap_first}(${ClassName?cap_first}BatchUpdateReqDTO ${ClassName?uncap_first}BatchUpdateReqDTO) {
        List<${ClassName?cap_first}> ${ClassName?uncap_first}List = ${ClassName?uncap_first}BatchUpdateReqDTO.getUpdate${ClassName?cap_first}List().stream()
                .map(item-> mapper.map(item, ${ClassName?cap_first}.class)).collect(Collectors.toList());
        ${ClassName?uncap_first}Service.batchUpdate(${ClassName?uncap_first}List);
        return BaseResponse.createSuccessResult(null);
    }

    @Override
    public BaseResponse delete${ClassName?cap_first}(${id.javaType} ${id.name}) {
        int result = ${ClassName?uncap_first}Service.deleteById(${id.name});

        return BaseResponse.createSuccessResult(null);
    }

    @Override
    public BaseResponse batchDelete${ClassName?cap_first}(${ClassName?cap_first}BatchDeleteReqDTO reqDTO) {
        ${ClassName?uncap_first}Service.batchDelete(reqDTO.getIdList());
        return BaseResponse.createSuccessResult(null);
    }

    @Override
    public BaseResponse query${ClassName?cap_first}(${id.javaType} ${id.name}) {
        ${ClassName?cap_first} result = ${ClassName?uncap_first}Service.selectByCode(${id.name});
        return BaseResponse.createSuccessResult(mapper.map(result, ${ClassName?cap_first}PageResDTO.class));
    }

    @Override
    public PageQueryResponse<${ClassName?cap_first}PageResDTO> queryPage(PageRequest<${ClassName?cap_first}PageReqDTO> pageRequest) {

        PageRequest<${ClassName?cap_first}> request = new PageRequest();
        request.setPageIndex(pageRequest.getPageIndex());
        request.setPageSize(pageRequest.getPageSize());

        if (Objects.nonNull(pageRequest.getModel())) {
            request.setModel(mapper.map(pageRequest.getModel(), ${ClassName?cap_first}.class));
        }

        Page<${ClassName?cap_first}> ${ClassName?uncap_first}List = ${ClassName?uncap_first}Service.queryPage(request);

        List<${ClassName?cap_first}PageResDTO> ${ClassName?uncap_first}PageResDTOList = ${ClassName?uncap_first}List.stream().map(item->mapper
                .map(item,${ClassName?cap_first}PageResDTO.class)).collect(Collectors.toList());

        PageQueryResponse<${ClassName?cap_first}PageResDTO> pageQueryResponse = PageQueryResponse.createSuccessResult(${ClassName?uncap_first}PageResDTOList);

        pageQueryResponse.setTotalCount((int)${ClassName?uncap_first}List.getTotal());
        pageQueryResponse.setPageSize(pageRequest.getPageSize());
        pageQueryResponse.setPageIndex(pageRequest.getPageIndex());

        return pageQueryResponse;
    }

    @Override
    public BaseResponse<List<${ClassName?cap_first}PageResDTO>> queryAll(${ClassName?cap_first}PageReqDTO reqDTO) {
        return BaseResponse.createSuccessResult(
                ${ClassName?uncap_first}Service.queryAll(mapper.map(reqDTO,${ClassName?cap_first}.class))
                                        .stream().map(item -> mapper.map(item,${ClassName?cap_first}PageResDTO.class))
                                                 .collect(Collectors.toList()));
    }


}]]>
	</content>
</template>