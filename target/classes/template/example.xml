<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>entity</name>
	<filePath>${projectPath}/src/main/java/${packageName?replace(".","/")}/domain/${ClassName?uncap_first}/</filePath>
	<fileName>${ClassName?cap_first}Example.java</fileName>
	<content><![CDATA[/**
 * Copyright &copy; 2015-2016 All rights reserved.
 */
package ${packageName}.domain.entity.${ClassName?uncap_first};
import java.util.ArrayList;
import java.util.List;
<#if import==true>
import ${i};
</#if>

/**
 * ${functionName}Example
 * @author ${functionAuthor}
 * @date ${functionDate}
 * @version ${functionVersion}
 */
public class ${ClassName?cap_first}Example {
	
	protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> oredCriteria;

    public ${ClassName?cap_first}Example() {
        oredCriteria = new ArrayList<Criteria>();
    }

    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    public String getOrderByClause() {
        return orderByClause;
    }

    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    public boolean isDistinct() {
        return distinct;
    }

    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }	
	
	protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }
		
		//id
		public Criteria and${id.name?cap_first}IsNull() {
            addCriterion("${id.column} is null");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}IsNotNull() {
            addCriterion("${id.column} is not null");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}EqualTo(String value) {
            addCriterion("${id.column} =", value, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}NotEqualTo(String value) {
            addCriterion("${id.column} <>", value, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}GreaterThan(String value) {
            addCriterion("${id.column} >", value, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}GreaterThanOrEqualTo(String value) {
            addCriterion("${id.column} >=", value, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}LessThan(String value) {
            addCriterion("${id.column} <", value, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}LessThanOrEqualTo(String value) {
            addCriterion("${id.column} <=", value, "${id.name}");
            return (Criteria) this;
        }
        
        public Criteria and${id.name?cap_first}Like(String value) {
            addCriterion("${id.column} like", value, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}NotLike(String value) {
            addCriterion("${id.column} not like", value, "${id.name}");
            return (Criteria) this;
        }
        
        public Criteria and${id.name?cap_first}In(List<String> values) {
            addCriterion("${id.column} in", values, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}NotIn(List<String> values) {
            addCriterion("${id.column} not in", values, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}Between(String value1, String value2) {
            addCriterion("${id.column} between", value1, value2, "${id.name}");
            return (Criteria) this;
        }

        public Criteria and${id.name?cap_first}NotBetween(String value1, String value2) {
            addCriterion("${id.column} not between", value1, value2, "${id.name}");
            return (Criteria) this;
        }
		
		//循环
		<#list filedList as filed>
        public Criteria and${filed.name?cap_first}IsNull() {
            addCriterion("${filed.column} is null");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}IsNotNull() {
            addCriterion("${filed.column} is not null");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}EqualTo(${filed.javaType} value) {
            addCriterion("${filed.column} =", value, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}NotEqualTo(${filed.javaType} value) {
            addCriterion("${filed.column} <>", value, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}GreaterThan(${filed.javaType} value) {
            addCriterion("${filed.column} >", value, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}GreaterThanOrEqualTo(${filed.javaType} value) {
            addCriterion("${filed.column} >=", value, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}LessThan(${filed.javaType} value) {
            addCriterion("${filed.column} <", value, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}LessThanOrEqualTo(${filed.javaType} value) {
            addCriterion("${filed.column} <=", value, "${filed.name}");
            return (Criteria) this;
        }
		<#if filed.javaType == "String">
        public Criteria and${filed.name?cap_first}Like(${filed.javaType} value) {
            addCriterion("${filed.column} like", value, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}NotLike(${filed.javaType} value) {
            addCriterion("${filed.column} not like", value, "${filed.name}");
            return (Criteria) this;
        }
		</#if>
        public Criteria and${filed.name?cap_first}In(List<${filed.javaType}> values) {
            addCriterion("${filed.column} in", values, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}NotIn(List<${filed.javaType}> values) {
            addCriterion("${filed.column} not in", values, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}Between(${filed.javaType} value1, ${filed.javaType} value2) {
            addCriterion("${filed.column} between", value1, value2, "${filed.name}");
            return (Criteria) this;
        }

        public Criteria and${filed.name?cap_first}NotBetween(${filed.javaType} value1, ${filed.javaType} value2) {
            addCriterion("${filed.column} not between", value1, value2, "${filed.name}");
            return (Criteria) this;
        }
        </#list>
    }

    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}]]>
	</content>
</template>